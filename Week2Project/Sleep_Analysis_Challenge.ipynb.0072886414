{
 "cells": [
  {
   "cell_type": "markdown",
   "source": "# \"You Snooze, You Win\" Challenge\n\nEvery year, the [PhysioNet/CinC (Computing in Cardiology) Challenge](https://www.physionet.org/challenge/) invites \"participants to tackle clinically interesting problems that are either unsolved or not well-solved.\" For this year's week 2 machine learning challenge, BWSI has revived a past PhysioNet challenge based on sleep classification.\n\nThis year's challenge focuses on the classification of nonarousal and arousal timeframes. If you would like to understand the biological implications of the challenge, we recommend reading PhysioNet's [introduction](https://physionet.org/challenge/2018/) of the challenge.\n\nFor this challenge, you will classify samples into 5 classes (Arousal, NREM1, NREM2, NREM3, REM). Each sample consists of seven physiological signals (O2-M1, E1-M2, Chin1-Chin2, ABD, CHEST, AIRFLOW, ECG) measured at 200 Hz over a 60 second period (12000 timepoints). In this notebook, we provide code to import the data, visualize sample signals, implement an example classifier, and 'score' your model.",
   "metadata": {
    "cell_id": "00000-5b35177e-8691-4804-9f91-e20e15c842a8",
    "colab_type": "text",
    "id": "FB6YunD0Gdgc",
    "deepnote_cell_type": "markdown",
    "deepnote_cell_height": 349.984375
   }
  },
  {
   "cell_type": "code",
   "metadata": {
    "cell_id": "00001-f1af2f6c-ad55-4c9c-8b09-3bb9250b43f2",
    "colab": {},
    "colab_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 7931,
    "execution_start": 1658507552345,
    "id": "7ctSzKHoGr1q",
    "source_hash": "7ebb653e",
    "vscode": {
     "languageId": "python"
    },
    "deepnote_cell_type": "code",
    "deepnote_cell_height": 423
   },
   "source": "### Import libraries ###\n\nimport matplotlib.pyplot as plt\nimport matplotlib\n\n#set default plotting fonts\nfont = {'family' : 'sans-serif',\n        'weight' : 'normal',\n        'size'   : 20}\n\nmatplotlib.rc('font', **font)\n\nimport numpy as np\nimport os\nimport pandas as pd\nimport random\nfrom sklearn import metrics\nfrom sklearn.utils import shuffle\nimport tensorflow as tf\nimport pickle",
   "execution_count": 1,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": "## Loading the Dataset\n\nThis dataset is a modified version of the PhysioNet/CinC Challenge data, which were contributed by the Massachusetts General Hospitalâ€™s Computational Clinical Neurophysiology Laboratory, and the Clinical Data Animation Laboratory.\n***\n**Class labels:**\n- 0 = Arousal\n- 1 = NREM1\n- 2 = NREM2\n- 3 = NREM3\n- 4 = REM\n***\n**Class descriptions:**\n\n<img src=\"https://github.com/BeaverWorksMedlytics2020/Data_Public/blob/master/Images/Week2/sleepStagesTable.svg?raw=true\">\n\n***\n**Physiological signal description:**\n\nO2-M1 - posterior brain activity (electroencephalography)\n\nE1-M2 - left eye activity (electrooculography)\n\nChin1-Chin2 - chin movement (electromyography)\n\nABD - abdominal movement (electromyography)\n\nCHEST - chest movement (electromyography)\n\nAIRFLOW - respiratory airflow\n\nECG - cardiac activity (electrocardiography)\n***\nRun the below cell block to get the challenge data.",
   "metadata": {
    "cell_id": "00002-2a66a884-7df0-4b74-9a02-08542c28d79f",
    "colab_type": "text",
    "id": "_XxIE6ZwGvjh",
    "deepnote_cell_type": "markdown",
    "deepnote_cell_height": 994.203125
   }
  },
  {
   "cell_type": "code",
   "metadata": {
    "cell_id": "00003-a201c268-5e02-45a5-95db-0c8060205363",
    "colab": {},
    "colab_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 723,
    "execution_start": 1658507560281,
    "id": "yfgbZPNYziXt",
    "source_hash": "1c726408",
    "vscode": {
     "languageId": "python"
    },
    "deepnote_cell_type": "code",
    "deepnote_cell_height": 147.6875
   },
   "source": "# Clone repo and move into data directory (only run this once)\n!git clone https://github.com/Medlytics2022/Week2\nos.chdir('./Week2/Datasets/ChallengeProject/')",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "text": "fatal: destination path 'Week2' already exists and is not an empty directory.\n",
     "output_type": "stream"
    }
   ]
  },
  {
   "cell_type": "markdown",
   "source": "## Loading Data in Memory\nRun the cell below to extract the raw training and test data. It may take a minute or two to run through. Here are the variables containing the data you will get:\n\n* **data_train**: np array shape (4000, 12000, 7). Contains 4000 samples (60s each) of 12000 data points (200Hz x 60s), for 7 different signals. \n* **labels_train**: np array shape (4000,). Contains ground truth labels for data_train. The order of the labels corresponds to the order of the training data.\n* **ID_train**: list of 4000 unique IDs. The order of the IDs corresponds to the order of the training data. \n* **data_test**: np array shape (1000, 12000, 7). Contains 1000 samples (60s each) of 12000 data points (200Hz x 60s), for 7 different signals.\n* **ID_test**: list of 1000 unique IDs. The order of the IDs corresponds to the order of the training data.\n\nWe encourage you to print each of these variables to see what they look like.",
   "metadata": {
    "cell_id": "00004-3d3e4334-5b36-4bac-b74b-bc50ce498e4c",
    "colab_type": "text",
    "id": "qANF2BvQG2m3",
    "deepnote_cell_type": "markdown",
    "deepnote_cell_height": 372.375
   }
  },
  {
   "cell_type": "code",
   "metadata": {
    "cell_id": "00005-4c910dc5-b4a1-44b5-b042-c8b0ecf031a8",
    "colab": {},
    "colab_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 81,
    "execution_start": 1658507560929,
    "id": "-Rw8inOvG5QP",
    "source_hash": "d3a8a89",
    "vscode": {
     "languageId": "python"
    },
    "deepnote_cell_type": "code",
    "deepnote_cell_height": 849.6875
   },
   "source": "### Run once to import data ###\n\ndef get_file_locs():\n    '''\n    find all files in 'training' and 'test' directories and put their names \n    under 'training' and 'test' keys in the file_dict dictionary\n    '''\n\n    file_dict = {'training':[], 'test':[]}\n    for data_type in file_dict:\n        for file in os.listdir('./' + data_type):\n            file_dict[data_type].append(data_type + '/' + file)\n    \n    return file_dict\n\ndef get_sample_data(data_type, id_number):\n    '''\n    get signal data, label, and filename associated with given data type and index num\n\n    parameters:\n\n     data_type -- Dictates whether sample comes from training set or test set.\n                 This input must be either 'training' or 'test' (defaults to 'training')\n\n     id_number -- Which sample ID should be returned? Must be 0-3999 if data_type is 'training'\n                 or 0-999 if data_type is 'test' (defaults to random integer from 0-999)\n  \n    returns:\n\n     sample_data -- dataframe with 1 row and 2 columns-- column \"Signal\" contains a series object \n                    and column \"Label\" contains numeric label for that sample\n    '''\n    file = './' + data_type + '/' + str(id_number) + '.xz'\n\n    #sample_data is a dataframe with 1 row and 2 columns--\n    #\"Signal\" (contains a series object) and \"Label\" (contains numeric label)\n    sample_data = pd.read_pickle('./' + file)\n\n    return sample_data, file.split('/')[2]\n\nfile_dict = get_file_locs()\nprint(f\"{len(file_dict['training'])} training samples found, {len(file_dict['test'])} test samples found\")",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "text": "4000 training samples found, 1000 test samples found\n",
     "output_type": "stream"
    }
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "cell_id": "00006-bf238f1f-de7c-4755-8a8a-c15114ff7f53",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 42706,
    "execution_start": 1658507560937,
    "source_hash": "2655dc03",
    "tags": [],
    "vscode": {
     "languageId": "python"
    },
    "deepnote_cell_type": "code",
    "deepnote_cell_height": 411.5625
   },
   "source": "data_train = np.zeros((4000, 12000, 7))\nlabels_train = np.zeros(4000)\nID_train = []\nfor i in range(4000):\n  sample_data, ID = get_sample_data('training', i)\n  data_train[i] = np.array(list(sample_data['Signal']), dtype=np.float64).reshape(12000, 7)\n  labels_train[i] = np.array(list(sample_data['Label']), dtype=np.float64)\n  ID_train.append(ID)\n  if(i%500==0):\n    print('Loading training sample ' + str(i))",
   "execution_count": 4,
   "outputs": [
    {
     "name": "stdout",
     "text": "Loading training sample 0\nLoading training sample 500\nLoading training sample 1000\nLoading training sample 1500\nLoading training sample 2000\nLoading training sample 2500\nLoading training sample 3000\nLoading training sample 3500\n",
     "output_type": "stream"
    }
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "cell_id": "00007-31814338-2419-416f-a45e-259742b31795",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 10720,
    "execution_start": 1658507603645,
    "source_hash": "4a09bbeb",
    "tags": [],
    "vscode": {
     "languageId": "python"
    },
    "deepnote_cell_type": "code",
    "deepnote_cell_height": 257.390625
   },
   "source": "data_test = np.zeros((1000, 12000, 7))\nID_test = []\nfor i in range(1000):\n  sample_data, ID = get_sample_data('test', i)\n  data_test[i] = np.array(list(sample_data['Signal']), dtype=np.float64).reshape(12000, 7)\n  ID_test.append(ID)\n  if(i%500==0):\n    print('Loading test sample ' + str(i))",
   "execution_count": 5,
   "outputs": [
    {
     "name": "stdout",
     "text": "Loading test sample 0\nLoading test sample 500\n",
     "output_type": "stream"
    }
   ]
  },
  {
   "cell_type": "markdown",
   "source": "## Data Visualization\n\nRun the cell below to visualize the raw data for a single 60s sample for all 7 signals. We strongly urge you to visualize a few different samples to get a feel for how the data looks and how much each signal can vary in amplitude and frequency from sample to sample. You can change which sample is being visualized by changing the arguments to the graph_signals call.",
   "metadata": {
    "cell_id": "00006-476acac3-4fc1-43ea-bfe3-f6ee5ead8d37",
    "colab_type": "text",
    "id": "CFZ0IhXKgJSI",
    "deepnote_cell_type": "markdown",
    "deepnote_cell_height": 175.59375
   }
  },
  {
   "cell_type": "code",
   "metadata": {
    "cell_id": "00007-0df14ee7-17f6-44dd-b707-72c584d71b59",
    "colab": {},
    "colab_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 1622,
    "execution_start": 1658507614374,
    "id": "G6x9vTz5HE1R",
    "source_hash": "f0be3e70",
    "vscode": {
     "languageId": "python"
    },
    "deepnote_cell_type": "code",
    "deepnote_cell_height": 2157.6875,
    "deepnote_output_heights": [
     null,
     611
    ]
   },
   "source": "### Define some useful functions to retrieve and plot data from individual samples ###\n\n\"\"\" Initalize key reference dictionaries \"\"\"\nsig_dict = {0:'O2-M1', 1:'E1-M2', 2:'Chin1-Chin2', 3:'ABD', 4:'CHEST', 5:'AIRFLOW', 6:'ECG'}\nsig_type_dict = {0:'Time (s)', 1:'Frequency (Hz)'}\nstage_dict = {0:'Arousal', 1:'NREM1', 2:'NREM2', 3:'NREM3', 4:'REM'}\n\ndef graph_signals(data_type = 'training', id_number = None):\n    '''\n    Create a graph of multiple signals, with rows representing signal class, and\n    columns representing signal domain (i.e. time or frequency) \n    \n    inputs:\n    \n      parameters:\n\n      data_type -- Dictates whether sample comes from training set or test set.\n                 This input must be either 'training' or 'test' (defaults to 'training')\n\n      id_number -- Which sample ID should be returned? Must be 0-3999 if data_type is 'training'\n                 or 0-999 if data_type is 'test' (defaults to random integer from 0-999)\n  \n    '''\n\n    assert data_type in ['test','training'], 'data_type should be either \"test\" or \"training\"'\n\n    if id_number is None:\n      if data_type == 'training':\n        id_number = random.randint(0,3999)\n      else:\n        id_number = random.randint(0,999)\n\n    #set time_signal_y based on 'test' or 'training' input\n    if data_type == 'training':\n        #time_signal_y = data_train_orig[id_number,:,:]\n        time_signal_y = data_train[id_number,:,:]\n    else:\n        #time_signal_y = data_test_orig[id_number,:,:]\n        time_signal_y = data_test[id_number,:,:]\n\n    #Get signal values in time domain from either data_train_orig, or data_test_orig\n    time_signal_x = np.arange(0, 60, step = 1/200) #this time axis doesn't change\n\n    #Use time-domain signals to get frequency domain signals\n    num_datapoints = time_signal_x.shape[0]\n    freq_signal_x = np.arange(num_datapoints//2 + 1)/60\n    freq_signal_y = np.ndarray(shape = (num_datapoints//2 + 1, 7))\n    freq_signal_y = np.abs(np.fft.rfft(time_signal_y, axis = 0))\n\n    plt.figure(figsize = (20, 18))\n    title_list = ['time domain', 'freq domain']\n    for signal_index in range(7): #7 classes of signal (O2-M1, E2-M2, etc.)\n        for signal_domain_index in range(2): #2 types of signal (time and freq domain)\n            plt.subplot(7, 2, 2*signal_index + signal_domain_index + 1)\n            if signal_index==0:\n                plt.title(title_list[signal_domain_index])\n            if signal_domain_index == 0: #plot time domain signal\n                plt.plot(time_signal_x, time_signal_y[:,signal_index])\n            if signal_domain_index == 1: #plot freq domain signal\n                plt.plot(freq_signal_x, freq_signal_y[:,signal_index])\n            plt.ylabel(sig_dict[signal_index])\n        plt.xlabel(sig_type_dict[signal_domain_index])\n    plt.show()\n\n# We can now use the above functions to retrieve data for a single sample \n# (in the test or training set) and then plot it\n\n# change these 2 lines to plot different samples (note that test set only has 1000 samples)\ndata_type = 'training'\nid_number = random.randint(0, 3999)\n\n#print signal ID and the sample label (if known)\nif data_type == 'training': \n    print(data_type.title(), str(id_number), '(' + stage_dict[id_number//800] + ')')\nelse: \n    print(data_type.title(), str(id_number), '(Unknown)')\n\n#plot data from this sample\ngraph_signals(data_type = data_type, id_number = id_number)",
   "execution_count": 6,
   "outputs": [
    {
     "name": "stdout",
     "text": "Training 3070 (NREM3)\n",
     "output_type": "stream"
    },
    {
     "data": {
      "text/plain": "<Figure size 1440x1296 with 14 Axes>",
      "image/png": "